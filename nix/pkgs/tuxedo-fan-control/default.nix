# This file has been generated by node2nix 1.7.0. Do not edit!

{ pkgs, nodejs, stdenv, lib }:

let
  packageName = with lib; concatStrings (map (entry: (concatStrings (mapAttrsToList (key: value: "${key}-${value}") entry))) (importJSON ./package.json));
  version = "0.1.9";

  baseNodePackages = import ./node-composition.nix {
    inherit pkgs nodejs;
    inherit (stdenv.hostPlatform) system;
  };

  nodePackages = baseNodePackages // {
    electron = baseNodePackages.electron.override { dontNpmInstall = true; postInstall = "true"; };
  };
in

nodePackages."${packageName}".override {
  nativeBuildInputs = [ pkgs.makeWrapper ];

  # dontNpmInstall = true;

  # postInstall = ''
  #   makeWrapper '${nodejs}/bin/node'
  # '';
}

# { pkgs, nodejs, stdenv, lib }:

# let
#   nodeEnv = import ./node-env.nix {
#     inherit (pkgs) stdenv python2 utillinux runCommand writeTextFile;
#     inherit nodejs;
#     libtool = if pkgs.stdenv.isDarwin then pkgs.darwin.cctools else null;
#   };

#   nodePackages = import ./node-composition.nix {
#     inherit pkgs nodejs;
#     inherit (stdenv.hostPlatform) system;
#   }
# in

# nodePackages // {
#   tuxedo-fan-control = nodePackages.tuxedo-fan-control.override {
#   };
# }

# nodeEnv."${packageName}".override {
#   packageName = with lib; concatStrings (map (entry: (concatStrings (mapAttrsToList (key: value: "${key}-${value}") entry))) (importJSON ./package.json));
#   version = "0.1.9";
# }

# {pkgs ? import <nixpkgs> {
#     inherit system;
#   }, system ? builtins.currentSystem, nodejs ? pkgs."nodejs-12_x"}:

# let
#   nodeEnv = import ./node-env.nix {
#     inherit (pkgs) stdenv python2 utillinux runCommand writeTextFile;
#     inherit nodejs;
#     libtool = if pkgs.stdenv.isDarwin then pkgs.darwin.cctools else null;
#   };
# in
# import ./node-packages.nix {
#   inherit (pkgs) fetchurl fetchgit;
#   inherit nodeEnv;
# }
