---

- name: Install cbde homebrew tap
  homebrew_tap: >
    name=cowbell/stuff
    url=ssh://git@git.realestate.com.au:65422/cowbell/homebrew-stuff
    state=present
  become: yes
  become_user: "{{ user.name }}"

- name: Install rea-as
  homebrew: >
    name=rea-as
    state=present
  become: yes
  become_user: "{{ user.name }}"

- name: Install (rea) aws authentication shortcuts
  homebrew: >
    name=aws-console-url
    state=present
  become: yes
  become_user: "{{ user.name }}"

- name: Install (rea) aws-shortcuts
  git: >
    dest="{{ user.home }}/.aws-shortcuts"
    repo=ssh://git@git.realestate.com.au:65422/resi-lob/aws-shortcuts
    depth=1
    force=no
    update=no
  become: yes
  become_user: "{{ user.name }}"

- name: Install rea-slip-utils
  git: >
    dest="{{ user.home }}/.rea-slip-utils"
    repo=ssh://git@git.realestate.com.au:65422/cowbell/rea-slip-utils
    depth=1
    force=no
    update=no
  become: yes
  become_user: "{{ user.name }}"

- name: Add rea configuration to .profile
  blockinfile:
    dest: "{{ user.home }}/.profile"
    state: present
    insertafter: "# ansible: work/rea"
    marker: "# {mark} ansible: work/rea"
    block: |
      export REA_LDAP_USER={{ user.name }}
      export AWS_DEFAULT_REGION=ap-southeast-2
      export PATH="$HOME/.rea-slip-utils/bin:$PATH"

      export CP_DOMAIN_ENV=production

      # rea-slip-docker-login is too long!
      alias docker-login="rea-slip-docker-login"

      # Enable aws-shortcuts
      if [ -e $HOME/.aws-shortcuts/iam-roles.txt ]; then
         source $HOME/.aws-shortcuts/aws-shortcuts.sh
      else
        echo "Cannot source `aws-shortcuts`: iam-roles.txt is missing."
        echo "To fix run:"
        echo ""
        echo "    rea-as saml > ~/.aws-shortcuts/iam-roles.txt"
        echo ""
      fi

      # Alias aws-console-url
      function aws-console {
        if [ -z ${AWS_ROLE} ]; then
          echo "No AWS_ROLE found. Are you authenticated?"
          return
        fi

        USER_DATA_DIR=/tmp/chrome-profile-$AWS_ROLE
        mkdir -p "${USER_DATA_DIR}"
        open -a "Google Chrome" --new --args --profile-directory="${USER_DATA_DIR}" --incognito $(aws-console-url)
      }
